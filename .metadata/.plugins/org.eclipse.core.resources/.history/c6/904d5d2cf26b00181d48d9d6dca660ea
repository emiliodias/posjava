package br.com.blazon.oauth2;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class AuthorizationController {

	private final Logger logger = LoggerFactory.getLogger(getClass());

	@RequestMapping("/authorize")
	public void authorize(HttpServletRequest request, HttpServletResponse response) {

		String redirect = "http://localhost:8090/oauth/authorize?client_id=fooClientIdPassword&response_type=code&redirect_uri=http://localhost:8081/callback";

		try {
			response.sendRedirect(redirect);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@RequestMapping("/callback")
    public void callback(HttpServletRequest req, HttpServletResponse resp) {
    	
    	String code = req.getParameter("code");
    	
    	String token = "http://localhost:8090/oauth/authorize?cliet_id=fooClientIdPassword&response_type=code";
    	
    	System.out.println(String.format("Code recebido: %s", code));
		
		String clientId = "228869176683-f3luu63d323nucdn2ed5vdjgo7fmkire.apps.googleusercontent.com";
		String clientSecret = "wXx0preJdFyz7PqUe7ne9fc1";
		
		String redirectUri = "http://localhost:8080/authtestes/oauth2callback";
		
		
		CloseableHttpClient client = HttpClients.createDefault();
	    HttpPost httpPost = new HttpPost("https://accounts.google.com/o/oauth2/token");
	 
	    List<NameValuePair> params = new ArrayList<NameValuePair>();
	    params.add(new BasicNameValuePair("grant_type", "authorization_code"));
	    params.add(new BasicNameValuePair("code", code));
	    params.add(new BasicNameValuePair("client_id", clientId));
	    params.add(new BasicNameValuePair("client_secret", clientSecret));
	    params.add(new BasicNameValuePair("redirect_uri", redirectUri));
	   
	    try {
			httpPost.setEntity(new UrlEncodedFormEntity(params));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    CloseableHttpResponse response = null;
	 
	    try {
			response = client.execute(httpPost);
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    
			String body = EntityUtils.toString(response.getEntity());
			
			JSONObject object = new JSONObject(body);
			
			String accessToken = (String) object.get("access_token");
			
			System.out.println("Access Token: " + accessToken);
        
	    

}